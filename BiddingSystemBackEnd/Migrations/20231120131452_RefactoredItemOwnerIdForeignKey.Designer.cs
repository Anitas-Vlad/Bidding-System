// <auto-generated />
using System;
using BiddingSystem.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BiddingSystem.Migrations
{
    [DbContext(typeof(BiddingSystemContext))]
    [Migration("20231120131452_RefactoredItemOwnerIdForeignKey")]
    partial class RefactoredItemOwnerIdForeignKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BiddingSystem.Models.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CurrentPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndOfAuction")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<double>("MinimumBidIncrement")
                        .HasColumnType("float");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("WinningBidId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("BiddingSystem.Models.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("BiddingSystem.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AvailableForAuction")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("StartingPrice")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1000,
                            AvailableForAuction = true,
                            Name = "Napoleon's Favorite Hat",
                            StartingPrice = 1000.0,
                            UserId = 1000
                        },
                        new
                        {
                            Id = 1001,
                            AvailableForAuction = true,
                            Name = "McDonald's Forever Free Nuggets",
                            StartingPrice = 230.0,
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1002,
                            AvailableForAuction = true,
                            Name = "Eiffel Tower Top Light",
                            StartingPrice = 56000.0,
                            UserId = 1002
                        });
                });

            modelBuilder.Entity("BiddingSystem.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Credit")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FrozenCredit")
                        .HasColumnType("float");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1000,
                            Credit = 0.0,
                            Email = "a@a.com",
                            FrozenCredit = 0.0,
                            PasswordHash = "$2a$11$93sTYl9lPaQB3CLPekOTm./v9iyg0XkqY.rYMO7DCVw/h7hp1g0Va",
                            UserName = "AAAAA"
                        },
                        new
                        {
                            Id = 1001,
                            Credit = 0.0,
                            Email = "b@b.com",
                            FrozenCredit = 0.0,
                            PasswordHash = "$2a$11$xICS73GNj4x9tcrUuPBRj.vVS9dL7mm1DVeWdWLf6Ngg7iTg0kZPq",
                            UserName = "BBBBB"
                        },
                        new
                        {
                            Id = 1002,
                            Credit = 0.0,
                            Email = "c@c.com",
                            FrozenCredit = 0.0,
                            PasswordHash = "$2a$11$xjNqNfDdH8nzsPfdrNabhOXR6VDimFK/M4K.hT6Qkxfcq8Iat.JoG",
                            UserName = "CCCCC"
                        });
                });

            modelBuilder.Entity("BiddingSystem.Models.Auction", b =>
                {
                    b.HasOne("BiddingSystem.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("BiddingSystem.Models.Bid", b =>
                {
                    b.HasOne("BiddingSystem.Models.Auction", null)
                        .WithMany("Bids")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiddingSystem.Models.User", null)
                        .WithMany("Bids")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiddingSystem.Models.Item", b =>
                {
                    b.HasOne("BiddingSystem.Models.User", null)
                        .WithMany("Items")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiddingSystem.Models.Auction", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("BiddingSystem.Models.User", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
